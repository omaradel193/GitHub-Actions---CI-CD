name: EKS Terraform K8s Deploy

on:
  workflow_dispatch: 

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3


      # 1. Install eksctl
      - name: Install eksctl
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          eksctl version

      # 2. Install kubectl
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.29.0'  

      - name: Verify kubectl
        run: kubectl version --client



      # 3. Install Terraform
      - name: Install Terraform
        run: |
          sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install terraform -y
          terraform -version

      # 4. Run your deployment logic (placeholder)
      - name: Deploy project
        run: |
          eksctl create cluster -n mycluster

      - name: Get EKS values from AWS
        id: eks_values
        run: |
          VPC_ID=$(aws eks describe-cluster --name mycluster --region $AWS_REGION --query "cluster.resourcesVpcConfig.vpcId" --output text)
          PUBLIC_SUBNET_ID=$(aws ec2 describe-subnets --filters "Name=tag:kubernetes.io/role/elb,Values=1" "Name=tag:eksctl.cluster.k8s.io/v1alpha1/cluster-name,Values=mycluster" --region $AWS_REGION --query "Subnets[0].SubnetId" --output text)
          PRIVATE_SUBNET_ID=$(aws ec2 describe-subnets --filters "Name=tag:kubernetes.io/role/internal-elb,Values=1" "Name=tag:eksctl.cluster.k8s.io/v1alpha1/cluster-name,Values=mycluster" --region $AWS_REGION --query "Subnets[0].SubnetId" --output text)
          SG_ID=$(aws eks describe-cluster --name mycluster --region $AWS_REGION --query "cluster.resourcesVpcConfig.securityGroupIds[0]" --output text)

          echo "vpc_id=$VPC_ID" >> $GITHUB_OUTPUT
          echo "public_subnet_id=$PUBLIC_SUBNET_ID" >> $GITHUB_OUTPUT
          echo "private_subnet_id=$PRIVATE_SUBNET_ID" >> $GITHUB_OUTPUT
          echo "sg_id=$SG_ID" >> $GITHUB_OUTPUT


      - name: Decode SSH private key
        run: |
          echo "${{ secrets.EC2_SSH_KEY_B64 }}" | base64 -d > my-ec2-key.pem
          chmod 600 my-ec2-key.pem


      - name: Terraform Apply
        working-directory: terraform
        run: |
          terraform init
          terraform apply -auto-approve \
            -var="vpc-id=${{ steps.eks_values.outputs.vpc_id }}" \
            -var="public_subnet_id=${{ steps.eks_values.outputs.public_subnet_id }}" \
            -var="private_subnet_id=${{ steps.eks_values.outputs.private_subnet_id }}" \
            -var="eks_worker_sg_id=${{ steps.eks_values.outputs.sg_id }}" \
            -var="key_name=my-ec2-key"
